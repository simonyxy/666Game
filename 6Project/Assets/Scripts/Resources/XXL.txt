-- import "BoardBlock"
local XXL = XXL or {}
local BlockItem = require "BlockItem"
local TopFightPanel = require "TopFightPanel"
local time = 0.5--砖块下落时间
local typeNumber = 4
local maxI = 7
local maxJ = 8
blockItems = {}
clickBlocks = {}
positionTable = {}
function XXL:new()
    local o = {}
    setmetatable( o, { __index = self })
    self.animatorTable = {}
    -- for i = 1,maxI,1 do
    --     table.insert(self.animatorTable,{})
    -- end
    return o   
end

function XXL:Hello()
    XXL:InitPositionTable()
    TopFightPanel:Init()
    aa = { ii = 1}
    bb = { ii = 1}
    if(aa==bb)then
        Debug.Log("lllllllllllll")
    end
    selectPanel = GameObject.Find("Canvas/GuildCrushWindow/Down/SelectPanel")
    local Down = GameObject.Find("Canvas/GuildCrushWindow/Down")
    self.BoardImage = Down.transform:Find("Board").gameObject
    self.BoardImage:SetActive(true)
    for i=1,maxI,1 do
        blockItems[i] ={}
        for j=1,maxJ,1 do
            local blockItem = BlockItem:new(i,j,math.random(typeNumber))
            self.animatorTable[tostring(blockItem)] = blockItem.block:GetComponent(Animator)
            local btn = blockItem.block
            blockItems[i][j] = blockItem
            btn:GetComponent(UnityEngine.UI.Button).onClick:AddListener(
                function()
                    XXL:Click(blockItem)
                end
            )
        end
    end
    -- local clearBlocks = XXL:IsOK()
    -- for key, value in pairs(clearBlocks) do  
    --     for key1, value1 in pairs(value) do
    --         value1.blockType = math.random(typeNumber)
    --         value1.image.gameObject:GetComponent(UnityEngine.UI.Image).sprite = sprites[value1.blockType]
    --     end
    -- end
    local clearBlocks = XXL:IsOK()
    local resetTime = 0
    while(clearBlocks)do
        resetTime = resetTime + 1
        for key, value in pairs(clearBlocks) do  
            for key1, value1 in pairs(value) do
                value1.blockType = math.random(typeNumber)
                value1.image.gameObject:GetComponent(UnityEngine.UI.Image).sprite = sprites[value1.blockType]
            end
        end
        clearBlocks = XXL:IsOK()
    end
    Debug.Log("resetTime="..resetTime)
    -- XXL:Show()
end

function XXL:InitPositionTable()
    local spaceX = 147
    local space = 142
    local shiftX = 66
    local shiftY = -49
    for i=1-maxI,maxI,1 do
        positionTable[i] ={}
        for j=1,maxJ,1 do
            positionTable[i][j]=Vector3(shiftX+(j-1)*spaceX,shiftY-(i-1)*space,0)
        end

    end
end

function XXL:Update()
    -- Debug.Log("lengthX="..#blockItems.."lengthY="..#blockItems[1])
end

function XXL:MoveBlock(block,i,j)--移动砖块到指定位置，并更新住砖块内容坐标
    -- Debug.Log("砖块(i="..block.i..",j="..block.j..")移动到("..i..","..j..")上")
    block.i = i
    block.j = j
    blockItems[i][j] = block
end

-- function XXL:SayHello()
--     -- Debug.Log("hello!!!!!!!!!!!!!!!!!!!!!")
-- end

function XXL:ExchangeBlcok(block1,block2)--交换砖块
    -- Debug.Log("砖块(i="..block1.i..",j="..block1.j..")与砖块(i="..block2.i..",j="..block2.j..")交换")
    local i1 = block1.i
    local j1 = block1.j
    local i2 = block2.i
    local j2 = block2.j
    XXL:MoveBlock(block1,i2,j2)
    XXL:MoveBlock(block2,i1,j1)
end

function XXL:SelectBLock(block)
    clickBlocks.firstBlock = block
    block.selectImage.gameObject:SetActive(true)
end

function XXL:CancelSelectBlock()
    clickBlocks.firstBlock.selectImage.gameObject:SetActive(false)
    clickBlocks.firstBlock = nil
end

function XXL:Click(blockItem)
    local i = blockItem.i
    local j = blockItem.j
    -- Debug.Log("i="..i..",j="..j..",t="..blockItems[i][j].blockType)
    if(clickBlocks.firstBlock == nil)--如果第一个元素为空
    then
        XXL:SelectBLock(blockItem)
        -- clickBlocks.firstBlock = blockItem
    else
        if(clickBlocks.firstBlock == blockItems[i][j])--如果点击的物体与第一个存放的物体相同
        then
            XXL:CancelSelectBlock(clickBlocks.firstBlock)
        else
            -- if((clickBlocks.firstBlock.i==blockItem.i and math.abs(clickBlocks.firstBlock.j-blockItem.j)==1) or
            -- (clickBlocks.firstBlock.j==blockItem.j and math.abs(clickBlocks.firstBlock.i-blockItem.i)==1))--两个砖块是否相邻
            if(true)
            then
                selectPanel:SetActive(true)
                clickBlocks.secondBlock = blockItems[i][j]
                clickBlocks.firstBlock.selectImage.gameObject:SetActive(false)
                LeanTween.move( clickBlocks.firstBlock.block, positionTable[clickBlocks.secondBlock.i][clickBlocks.secondBlock.j], time)
                LeanTween.move( clickBlocks.secondBlock.block, positionTable[clickBlocks.firstBlock.i][clickBlocks.firstBlock.j], time):setOnComplete(
                    function()
                        if(XXL:Judge())then
                            local s = ""
                            for key,value in pairs(self.fightData) do
                                s = s .. "{"
                                for key1,value1 in pairs(value) do
                                    s = s ..key1.."="..value1..","
                                end
                                s = s .. "},"
                            end
                            Debug.Log(s)
                            self.fightData.isFirstClick = true
                            LuaTimer.Add(1200,
                                function()
                                    TopFightPanel:GetInstance():UpdateRound(self.fightData)
                                end
                            )
                            -- XXL:Fall()--砖块掉落
                        else
                            ---------------------
                            -- selectPanel:SetActive(false)
                            -- Debug.LogError("!!!!进入FALL 稳态")
                            -- TopFightPanel:GetInstance():UpdateRound({[1] = {type = 13 }})
                            LeanTween.move( clickBlocks.firstBlock.block, positionTable[clickBlocks.secondBlock.i][clickBlocks.secondBlock.j], time)
                            LeanTween.move( clickBlocks.secondBlock.block, positionTable[clickBlocks.firstBlock.i][clickBlocks.firstBlock.j], time):setOnComplete(
                                function()
                                    -- Debug.Log("hhhhhhhhhhhhhhhhhhhello")
                                    selectPanel:SetActive(false)
                                end
                            )
                            XXL:ExchangeBlcok(clickBlocks.firstBlock,clickBlocks.secondBlock)
                        end
                            clickBlocks.firstBlock = nil
                            clickBlocks.secondBlock = nil
                    end
                )
                XXL:ExchangeBlcok(clickBlocks.firstBlock,clickBlocks.secondBlock)
            else
                XXL:CancelSelectBlock()
                XXL:SelectBLock(blockItem)
            end
        end
    end
    -- XXL:Show()
    -- Debug.Log("first:i="..clickBlocks.firstBlock.i..",j="..clickBlocks.firstBlock.j)
end


function XXL:Judge()
    -- local clearBlocks = XXL:IsOK()--诗悦777版本
    -- if(clearBlocks)then
    --     for key, value in pairs(clearBlocks) do  
    --         for key1, value1 in pairs(value) do
    --             XXL:DestroyBlock(value1)
    --         end
    --     end
    --     return true
    -- else
    --     return false
    -- end
    local clearBlocks = XXL:IsOK666()--666工作室版本
    local blockNumberTable = {}
    singleClearBlocks = {}
    self.fightData = {}
    if(clearBlocks)then
        for key, value in pairs(clearBlocks) do
            for key1,value1 in pairs(value) do
                singleClearBlocks[tostring(value1)] = value1
            end
        end
    end
    -- s = ""
    for key, value in pairs(singleClearBlocks) do
        -- s = s..#value.."-t"..value[1].blockType.."  "
        -- local num = #value>=5 and #value or 5
        num = #value
        if(num>5)then
            num = 5
        end
        -- local isFirst = "false"
        -- for key1,value1 in pairs(value) do
        --     isFirst = "true"
        -- end
        -- Debug.Log("num="..num)
        local isFirstBlock = false
        for key1,value1 in pairs(value) do
            if(value1==clickBlocks.firstBlock)then
                isFirstBlock = true
            end
        end
        local t = value[1].blockType + (num-3)*typeNumber
        if(isFirstBlock)then
            table.insert(self.fightData,self.fightData[1])
            self.fightData[1] = {type = t,number = num}
            -- Debug.Log("change!!!!!!!!!!!!!!!!!!")
        else
            table.insert(self.fightData,{type = value[1].blockType,number = num})
        end
    end
    -- Debug.Log(s)

    -- s = ""
    if(clearBlocks)then
        -- for key, value in pairs(clearBlocks) do  
        --     for key1, value1 in pairs(value) do
        --         -- s = s.."{"
        --         for key2, value2 in pairs(value1) do
        --             -- s = s.."i"..value2.i.."j"..value2.j.."t"..value2.blockType..","
        --             if(blockItems[value2.i][value2.j] ~= nil)then
        --                 XXL:DestroyBlock(value2)
        --             end
        --         end
        --         -- s = s.."}\n"
        --     end
        -- end
        for key,value in pairs(singleClearBlocks) do
            --singleClearBlocks存放了应该被消除的砖块信息，
            --与clickBlock的firstBlock比较可以确定新生成砖块位置
            if(#value>=4)then
                XXL:NewTypeBlock()
            end
            for key1,value1 in pairs(value) do
                XXL:DestroyBlock(value1)
            end
        end
        -- Debug.Log(s)
        return true
    else
        return false
    end
end

function XXL:NewTypeBlock()
    Debug.Log("hello")
end

function XXL:Fall()--砖块掉落
    flag = true--是否添加动画结束事件标签
    for j=1,maxJ,1 do
        local empty = 0
        for i=maxI,1,-1 do
            if(blockItems[i][j]==nil)then
                empty = empty + 1
            else
                lt = LeanTween.move(blockItems[i][j].block,positionTable[blockItems[i][j].i+empty][blockItems[i][j].j],time)
                if(flag)then
                    lt:setOnComplete(
                        function()
                            if(XXL:Judge())then
                                self.fightData.isFirstClick = false
                                LuaTimer.Add(1200,
                                function()
                                    -- Debug.LogError("调用延时~~")
                                    TopFightPanel:GetInstance():UpdateRound(self.fightData)
                                end
                                )
                                -- XXL:Fall()
                            else
                                selectPanel:SetActive(false)
                                -- Debug.LogError("!!!!进入FALL 稳态")
                                -- if(TopFightPanel.EnemyData.Hp_cur)<=900 then
                                --     XXL:SpecialEvent()
                                -- end
                                TopFightPanel:GetInstance():UpdateRound({[1] = {type = 13 }})
                            end

                        end
                    )
                    flag = false
                end
                XXL:MoveBlock(blockItems[i][j],blockItems[i][j].i+empty,blockItems[i][j].j)
            end
        end
        for i = 1,empty,1 do
            local blockItem = BlockItem:new(1-i,j,math.random(typeNumber))
            self.animatorTable[tostring(blockItem)] = blockItem.block:GetComponent(Animator)
            LeanTween.move(blockItem.block,positionTable[1-i+empty][j],time)
            XXL:MoveBlock(blockItem,1-i+empty,j)
            blockItem.block:GetComponent(UnityEngine.UI.Button).onClick:AddListener(
                function()
                    XXL:Click(blockItem)
                end
            )
        end
    end
    -- XXL:Show()
    -- LeanTween.move(nil,nil,2).setOnComplete(XXL:SayHello())
end

function XXL:DestroyBlock(blockItem)
    -- print("1~~~~~~~~~")
    self.animatorTable[tostring(blockItem)]:SetBool("IsDes",true)
    LuaTimer.Add(1200,function ()
        GameObject.Destroy(blockItem.block.gameObject)
    end)
    blockItems[blockItem.i][blockItem.j] = nil
    -- print("2~~~~~~~~~")
end

function XXL:PrintClearBlock(clearBlocks)
    s = ""
    for key,value in pairs(clearBlocks) do
        s = s.."(i"..value.i.."j"..value.j.."t"..value.blockType..") "
    end
    Debug.Log(s)
end

function XXL:IsOK666()--666工作组检测
    -- self.fightData = {}
    local clearBlocks = {}
    local OK = false
    for i=1,maxI,1 do--初始化清除表
        clearBlocks[i] ={}
    end
    for i=1,maxI,1 do--横向检测
        for j=1,maxJ-2,1 do
            if(clearBlocks[i][j]==nil and
                blockItems[i][j].blockType==blockItems[i][j+1].blockType and 
                blockItems[i][j].blockType==blockItems[i][j+2].blockType)--成功检测到消除
            then 
                OK = true
                -- self.fightData[#self.fightData+1] ={type = blockItems[i][j].blockType}
                local clearTable = {}
                for k=j,maxJ,1 do
                    if(blockItems[i][k].blockType==blockItems[i][j].blockType)then
                        table.insert(clearTable,blockItems[i][k])
                        clearBlocks[i][k] = clearTable
                        -- Debug.Log("i="..i.."k="..k)
                    else
                        break
                    end
                end
            end
        end
    end
    for j=1,maxJ,1 do--纵向检测
        local i = 1
        while(i<=maxI-2) do
            if(blockItems[i][j].blockType==blockItems[i+1][j].blockType and 
                blockItems[i][j].blockType==blockItems[i+2][j].blockType)--成功检测到消除
            then 
                OK = true
                -- self.fightData[#self.fightData+1] = {type = blockItems[i][j].blockType}
                local clearTable = {}
                local k = i
                while(k<=maxI)do
                    if(blockItems[k][j].blockType==blockItems[i][j].blockType)then
                        if(clearBlocks[k][j]~=nil)then
                            for key,value in ipairs(clearBlocks[k][j]) do
                                table.insert(clearTable,value)
                            end
                        else
                            table.insert(clearTable,blockItems[k][j])
                        end
                    else
                        i = k - 1
                        -- Debug.Log("i="..i.."------------------")
                        flagtt = true
                        break
                    end
                    k = k+1
                end
                for key,value in ipairs(clearTable)do
                    clearBlocks[value.i][value.j] = clearTable
                end
                if(k > maxI-2)then--如果已经三消延伸到最底下倒数第三个，则剩余的倒数第两个无需检测
                    break
                end
            end
            i = i + 1
        end
    end

    if(OK==true)then
        return clearBlocks
    end
    -- Debug.LogError(#self.fightData)
    return nil
    -- if(OK == true)
    -- then 
    --     return clearBlock
    -- else 
    --     return nil
    -- end
end

function XXL:IsOK()
    self.fightData = {}
    local clearBlocks = {}
    local OK = false
    for i=1,maxI,1 do--初始化清除表
        clearBlocks[i] ={}
    end
    for i=1,maxI,1 do--横向检测
        for j=1,maxJ-2,1 do
            if(blockItems[i][j].blockType==blockItems[i][j+1].blockType and 
                blockItems[i][j].blockType==blockItems[i][j+2].blockType)--成功检测到消除
            then 
                OK = true
                self.fightData[#self.fightData+1] = {type = blockItems[i][j].blockType}
                clearBlocks[i][j] = blockItems[i][j]
                clearBlocks[i][j+1] = blockItems[i][j+1]
                clearBlocks[i][j+2] = blockItems[i][j+2]
            end
        end
    end
    for i=1,maxI-2,1 do--纵向检测
        for j=1,maxJ,1 do
            if(blockItems[i][j].blockType==blockItems[i+1][j].blockType and 
                blockItems[i][j].blockType==blockItems[i+2][j].blockType)--成功检测到消除
            then 
                OK = true
                self.fightData[#self.fightData+1] = {type = blockItems[i][j].blockType}
                clearBlocks[i][j] = blockItems[i][j]
                clearBlocks[i+1][j] = blockItems[i+1][j]
                clearBlocks[i+2][j] = blockItems[i+2][j]
            end
        end
    end

    if(OK==true)then
        return clearBlocks
    end
    -- if #self.fightData ==0 then 
    --     Debug.LogError("!!!!进入FALL 稳态")
    --     TopFightPanel:GetInstance():UpdateRound({[1] = { type = 13 }})
    -- end
    return nil
    -- if(OK == true)
    -- then 
    --     return clearBlock
    -- else 
    --     return nil
    -- end
end

function XXL:Show()
    s = ""
    for i=1,maxI,1 do
        for j=1,maxJ,1 do
            if(blockItems[i][j]==nil)then
                s = s.."(nil     ) "
            else
                s = s.."(i"..blockItems[i][j].i.."j"..blockItems[i][j].j.."t"..blockItems[i][j].blockType..") "
            end
        end
        s = s.."\n"
    end
    print(s)
end

function XXL:SpecialEvent()
    -- Debug.Log("SpecialEvent!")
    for i = 1,7,1 do
        blockItems[i][1].blockType = blockItems[i][1].blockType*(blockItems[i][1].i+blockItems[i][1].j+3)
    end
    for i = 1,7,1 do
        blockItems[i][8].blockType = blockItems[i][8].blockType*(blockItems[i][8].i+blockItems[i][8].j+3)
    end
    -- GameObject.Find("Canvas/GuildCrushWindow/Down/Board/Lock1"):SetActive(true)
    -- GameObject.Find("Canvas/GuildCrushWindow/Down/Board/Lock2"):SetActive(true)
end

return XXL